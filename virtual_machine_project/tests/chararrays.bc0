C0 C0 FF EE       # magic number
00 0D             # version 6, arch = 1 (64 bits)

00 01             # int pool count
# int pool
00 00 3B 12

00 29             # string pool total size
# string pool
00  # ""
53 54 52 55 43 54 20 50 41 53 53 45 44 20 31 00  # "STRUCT PASSED 1"
00  # ""
00  # ""
00  # ""
45 78 70 65 63 74 69 6E 67 20 45 52 52 4F 52 20 6E 65 78 74 00  # "Expecting ERROR next"

00 01             # function count
# function_pool

#<main>
00 00             # number of arguments = 0
00 06             # number of local variables = 6
00 EF             # code length = 239 bytes
10 00    # bipush 0        # 0
BC 04    # newarray 4      # alloc_array(int, 0)
36 00    # vstore 0        # I = alloc_array(int, 0);
10 05    # bipush 5        # 5
BC 01    # newarray 1      # alloc_array(char, 5)
36 01    # vstore 1        # A = alloc_array(char, 5);
15 01    # vload 1         # A
10 03    # bipush 3        # 3
63       # aadds           # &A[3]
34       # cmload          # A[3]
B7 00 00 # invokenative 0  # printchar(A[3])
57       # pop             # (ignore result)
15 01    # vload 1         # A
10 03    # bipush 3        # 3
63       # aadds           # &A[3]
10 21    # bipush 33       # '!'
55       # cmstore         # A[3] = '!';
15 01    # vload 1         # A
10 03    # bipush 3        # 3
63       # aadds           # &A[3]
34       # cmload          # A[3]
B7 00 00 # invokenative 0  # printchar(A[3])
57       # pop             # (ignore result)
14 00 00 # aldc 0          # s[0] = ""
B7 00 01 # invokenative 1  # println("")
57       # pop             # (ignore result)
15 01    # vload 1         # A
10 00    # bipush 0        # 0
63       # aadds           # &A[0]
10 68    # bipush 104      # 'h'
55       # cmstore         # A[0] = 'h';
15 01    # vload 1         # A
10 01    # bipush 1        # 1
63       # aadds           # &A[1]
10 65    # bipush 101      # 'e'
55       # cmstore         # A[1] = 'e';
15 01    # vload 1         # A
10 02    # bipush 2        # 2
63       # aadds           # &A[2]
10 6C    # bipush 108      # 'l'
55       # cmstore         # A[2] = 'l';
15 01    # vload 1         # A
10 03    # bipush 3        # 3
63       # aadds           # &A[3]
10 6C    # bipush 108      # 'l'
55       # cmstore         # A[3] = 'l';
15 01    # vload 1         # A
10 04    # bipush 4        # 4
63       # aadds           # &A[4]
10 6F    # bipush 111      # 'o'
55       # cmstore         # A[4] = 'o';
10 00    # bipush 0        # 0
36 02    # vstore 2        # i = 0;
# <00:loop>
15 02    # vload 2         # i
10 05    # bipush 5        # 5
A1 00 06 # if_icmplt +6    # if (i < 5) goto <01:body>
A7 00 17 # goto +23        # goto <02:exit>
# <01:body>
15 01    # vload 1         # A
15 02    # vload 2         # i
63       # aadds           # &A[i]
34       # cmload          # A[i]
B7 00 00 # invokenative 0  # printchar(A[i])
57       # pop             # (ignore result)
15 02    # vload 2         # i
10 01    # bipush 1        # 1
60       # iadd            # 
36 02    # vstore 2        # i += 1;
A7 FF E5 # goto -27        # goto <00:loop>
# <02:exit>
BB 10    # new 16          # alloc(struct test)
36 02    # vstore 2        # t1 = alloc(struct test);
15 02    # vload 2         # t1
62 00    # aaddf 0         # &t1->s1
14 00 01 # aldc 1          # s[1] = "STRUCT PASSED 1"
4F       # amstore         # t1->s1 = "STRUCT PASSED 1";
15 02    # vload 2         # t1
62 08    # aaddf 8         # &t1->arr1
15 01    # vload 1         # A
4F       # amstore         # t1->arr1 = A;
14 00 11 # aldc 17         # s[17] = ""
B7 00 01 # invokenative 1  # println("")
57       # pop             # (ignore result)
15 02    # vload 2         # t1
62 08    # aaddf 8         # &t1->arr1
2F       # amload          # t1->arr1
10 04    # bipush 4        # 4
63       # aadds           # &t1->arr1[4]
34       # cmload          # t1->arr1[4]
B7 00 00 # invokenative 0  # printchar(t1->arr1[4])
57       # pop             # (ignore result)
14 00 12 # aldc 18         # s[18] = ""
B7 00 01 # invokenative 1  # println("")
57       # pop             # (ignore result)
15 02    # vload 2         # t1
62 00    # aaddf 0         # &t1->s1
2F       # amload          # t1->s1
B7 00 01 # invokenative 1  # println(t1->s1)
57       # pop             # (ignore result)
BB 08    # new 8           # alloc(int*)
36 03    # vstore 3        # dPt = alloc(int*);
15 03    # vload 3         # dPt
BB 04    # new 4           # alloc(int)
4F       # amstore         # *(dPt) = alloc(int);
15 03    # vload 3         # dPt
2F       # amload          # *(dPt)
13 00 00 # ildc 0          # c[0] = 15122
4E       # imstore         # *(*(dPt)) = 15122;
15 03    # vload 3         # dPt
2F       # amload          # *(dPt)
2E       # imload          # *(*(dPt))
B7 00 02 # invokenative 2  # printint(*(*(dPt)))
57       # pop             # (ignore result)
14 00 13 # aldc 19         # s[19] = ""
B7 00 01 # invokenative 1  # println("")
57       # pop             # (ignore result)
BB 01    # new 1           # alloc(char)
36 04    # vstore 4        # cPt = alloc(char);
15 04    # vload 4         # cPt
10 7A    # bipush 122      # 'z'
55       # cmstore         # *(cPt) = 'z';
15 04    # vload 4         # cPt
34       # cmload          # *(cPt)
B7 00 00 # invokenative 0  # printchar(*(cPt))
57       # pop             # (ignore result)
14 00 14 # aldc 20         # s[20] = "Expecting ERROR next"
B7 00 01 # invokenative 1  # println("Expecting ERROR next")
57       # pop             # (ignore result)
10 FF    # bipush -1       # -1
BC 04    # newarray 4      # alloc_array(int, -(1))
36 05    # vstore 5        # inv = alloc_array(int, -(1));
10 00    # bipush 0        # 0
B0       # return          # 

00 03             # native count
# native pool
00 01 00 12       # printchar
00 01 00 14       # println
00 01 00 13       # printint

