#use <util>

// Checks whether width and height are valid dimensions. To be valid
// dimensions, width and height must be strictly positive, and
// multiplying width*height must not cause overflow.
bool is_valid_imagesize(int width, int height)
//@requires width > 0 && height >0;
{

  return width > 0 
    && height > 0 
    && width <= int_max() / height;
}

// Returns the row number of a pixel in an image of size width*
// height stored as a one-dimensional array given the index of the
// pixel in the one-dimensional array.
// PRECONDITION: width and height are valid dimensions and index is
// in-bounds for an array of length width*height.
// POSTCONDITION: returned value is between 0 (inclusive) and height
// (exclusive).
int get_row(int index, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires 0 <= index && index < (width *height);
//@ensures 0 <= \result && \result < height;
{
    int num_cols = width;
    int num_rows = index/num_cols ;
    return num_rows;

}

// Returns the column number of a pixel in an image of size width*
// height stored as a one-dimensional array given the index of the
// pixel in the one-dimensional array.
// PRECONDITION: width and height are valid dimensions and index is
// in-bounds for an array of length width*height.
// POSTCONDITION: returned value is between 0 (inclusive) and width
// (exclusive).
int get_column(int index, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires 0 <= index && index < (width *height);
//@ensures  0<= \result && \result < width; 
{
    int num_cols = width;
    int col_index = index % width;

    return col_index;

}

// Given a width and height that are valid for an image, returns true
// if the given row and column represent a valid pixel location in an
// image of size width*height and false otherwise.
// PRECONDITION: width and height are valid dimensions
bool is_valid_pixel(int row, int col, int width, int height)
//@requires is_valid_imagesize(width, height); 
{

  int index = (row * width) + col;  // get index of pixel in array
  int arrayLength = width * height; //get total length of array
  bool validRow = 0 <= row && row < height;
  bool validCol = 0<= col && col < width;
  return validRow && validCol && (0<=index && index < arrayLength);
}

// Returns the index of a pixel in a one-dimensional array of pixels
// representing a two-dimensional image of size width*height, given
// the row and column of the pixel in the two-dimensional image.
// PRECONDITION: width and height are valid dimensions
// PRECONDITION: (row, col) is a valid pixel for an image of that
// width and height
// POSTCONDITION: returned value is in-bounds for an array of length
// width*height.
int get_index(int row, int col, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires is_valid_pixel(row, col, width,height);
//@ensures 0 <= \result && \result < (width * height);
{

   int index = (row * width) + col;
   return index;

}