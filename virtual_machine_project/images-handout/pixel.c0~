/* The pixel type and an interface to pixels */

typedef int pixel;

// Returns the red component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_red(pixel p)
//@ensures 0 <= \result && \result <= 255 ;
{
 int shiftAmt = 23 - 7;
 pixel pixelBits = p;
 pixelBits = pixelBits & 0x00FFFFFF; // change first 8 bits to 0
 //@assert pixelBits < 0x01000000;  // ensure no 1s in first 8 bits
 return pixelBits >> shiftAmt;

}

// Returns the green component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_green(pixel p)
//@ensures 0 <= \result && \result <= 255 ;
{
 int shiftAmt = 15 - 7;
 pixel pixelBits = p;
 pixelBits = pixelBits & 0x0000FFFF; // change first 16 bits to 0
 //@assert pixelBits < 0x00010000;  // ensure no 1s in first 16 bits
 return pixelBits >> shiftAmt;

}

// Returns the blue component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_blue(pixel p)
//@ensures 0 <= \result && \result <= 255 ;
{
 int shiftAmt = 7 - 7;
 pixel pixelBits = p;
 pixelBits = pixelBits & 0x000000FF; // change first 16 bits to 0
 //@assert pixelBits < 0x00000100;  // ensure no 1s in first 24 bits
 return pixelBits >> shiftAmt;

}

// Returns the alpha component of the given pixel p.
// POSTCONDITION: returned value is between 0 and 255, inclusive.
int get_alpha(pixel p)
//@ensures 0 <= \result && \result <= 255 ;
{
 int shiftAmt = 31 - 7;
 pixel pixelBits = p;
 pixelBits =  pixelBits >> shiftAmt;
 pixelBits = pixelBits & 0x000000ff; // turn all front 1s to 0s
 return pixelBits;

}

// Returns an int representing an RGB pixel consisting of the given
// alpha, red, green and blue intensity values.
// PRECONDITION: all intensity values must be between 0 and 255,
// inclusive.
pixel make_pixel(int alpha, int red, int green, int blue)
//@requires 0 <= red && red <= 255;
//@requires 0 <= green && green <= 255;
//@requires 0 <= blue && blue <= 255;
//@requires 0 <= alpha && alpha <= 255;

{
int alphaShift = 31 - 7;
int redShift = 23 - 7;
int greenShift = 15 - 7;
int alphaBit = alpha << alphaShift;
int redBit = red << redShift;
int greenBit = green << greenShift;

return alphaBit + redBit + greenBit + blue;
}